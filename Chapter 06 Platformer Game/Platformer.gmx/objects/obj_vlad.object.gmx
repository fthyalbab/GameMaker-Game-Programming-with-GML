<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_vlad_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variable initialization for character 

// The state of the character used within the update state.
state_id = state_idle;

// Has the player entered a new state.
entered_new_state = false;

// The speed at which the character walks by default.
def_walk_speed = 10;

// The friction used to reduced the character speed when returning from idle.
def_friction = 1;

// The speed applied to the character when jumping by default.
def_jump_speed = -15;

// The gravity applied to the character by default.
def_gravity = 1;

// The number of times the character has jumped.
jump_count = 0;

// The number of times the character is allowed to jump
jump_limit = 2;

// Is the character falling; used to differentiate jumping from falling.
grounded = false;

// At which frame does the animation loop?
loop_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State machine update.

// Gets the current state id.
var current_state = state_id;

// Updates the event.
event_user(state_id);

// Jump functionality, which can be performed in either state except jump.
if (state_id != state_jump)
{
    // If above the bottom of the room, the character falls.
    if (y &lt; global.room_bottom)
    {
        state_id = state_jump;
        grounded = false;
    }

    // If grounded, the jump count is in range, and the spacebar was pressed, the character will jump.
    if (grounded &amp;&amp; jump_count &lt; jump_limit &amp;&amp; keyboard_check_pressed(vk_up))
    {
        state_id = state_jump;
    }
}

// If the event has changed, the entry of a new state is designated.
if (current_state != state_id)
{
    entered_new_state = true;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// JUMP / FALL STATE

// If the state was newly entered.
if (entered_new_state)
{
    // Sets sprite index and looping index.
    sprite_index = spr_vlad_jump;
    loop_index = 11;

    // If grounded, the vertical speed is set to perform another jump and the jump counter is incremented.
    if (grounded)
    {
        vspeed = def_jump_speed;
        image_index = 0;
        
        audio_play_sound(snd_jump, 0, false);
    }
    else
    {
        image_index = 11;
    }
    
    // Jump counter is incremented, even for falling.
    jump_count++;
    
    // Sets the gravity and friction.
    gravity = def_gravity;
    friction = 0;
    
    // Designates that the character is not grounded.
    grounded = false;
    
    // Set to false so the entry functions are not called again.
    entered_new_state = false;
}

// If the left or right arrow key is pressed, the character moves slightly in that direction...
if (keyboard_check(vk_left))
{
    image_xscale = -1;
    hspeed = max(hspeed - def_friction, -def_walk_speed);
}
else if (keyboard_check(vk_right))
{
    image_xscale = 1;
    hspeed = min(hspeed + def_friction, def_walk_speed);
}
// otherwise the character returns to a neutral, horizontal speed.
else
{
    if (hspeed &lt; def_friction)
    {
        hspeed = min(hspeed + def_friction, 0);
    }
    else if (hspeed &gt; def_friction)
    {
        hspeed = max(hspeed - def_friction, 0);
    }
    else
    {
        hspeed = 0;
    }
    
}

// If the character is moving up, and the spacebar is released, the speed is divided in half...
if (vspeed &lt; 0 &amp;&amp; keyboard_check_released(vk_up))
{
    vspeed *= 0.5;
}
// If the jump count is less than the limit and the spacebar is pressed...
else if (jump_count &lt; jump_limit &amp;&amp; keyboard_check_pressed(vk_up))
{
    // Set to true to renter the jump state.
    entered_new_state = true;
    
    // Sets grounded to true so the character jumps and doesn't fall.
    grounded = true;
}

// If the y position plus the vertical speed is below the bottom of the room...
if (y + vspeed &gt; global.room_bottom)
{
    // Character is moved to the bottom of the room.
    y = global.room_bottom;
    
    // Speed and gravity are set to 0 to stop vertical movement.
    vspeed = 0;
    gravity = 0;
    
    // Jump counter is reset.
    jump_count = 0;
    
    // The state is set to idle.
    state_id = state_idle;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// WALK STATE

// If the walk state has been entered.
if (entered_new_state)
{
    // Sets the sprite index, image index, and loop index.
    sprite_index = spr_vlad_walk;
    image_index = 0;
    loop_index = 0;
    
    // Sets the friction and horizontal speed, reversing it if the character is facing left.
    friction = 0;
    hspeed = def_walk_speed;
    if (image_xscale &lt; 0)
    {
        hspeed *= -1;
    }
    
    // Set to false so the entry functions are not called again.
    entered_new_state = false;
}

// If the left arrow is released while facing left or the right arrow is released while facing right...
if ((image_xscale &lt; 0 &amp;&amp; !keyboard_check(vk_left)) || (image_xscale &gt; 0 &amp;&amp; !keyboard_check(vk_right)))
{
    // Return to the idle state.
    state_id = state_idle;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// IDLE STATE

// If the idle state has been entered.
if (entered_new_state)
{
    // Sets the sprite index, image index, and loop index.
    sprite_index = spr_vlad_idle;
    image_index = 0;
    loop_index = 0;

    // Sets the friction
    friction = def_friction;

    // Designates that the character is grounded.
    grounded = true;
    
    // Set to false so the entry functions are not called again.
    entered_new_state = false;
}

// If left arrow is down...
if (keyboard_check(vk_left))
{
    // Changes the state id.
    state_id = state_walk;
    
    // Mirrors the character so it is facing left.
    image_xscale = -1;
}
// If right arrow is down.
else if (keyboard_check(vk_right))
{
    // Changes the state id.
    state_id = state_walk;
    
    // Sets the x scale to 1 to make sure the character is facing right.
    image_xscale = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Loops the animation to the designated from upon completion of the animation.
image_index = loop_index;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>25,113</point>
    <point>60,60</point>
  </PhysicsShapePoints>
</object>
