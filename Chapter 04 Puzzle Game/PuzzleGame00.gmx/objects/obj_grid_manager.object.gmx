<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Creates the grid and the pieces on the board, storing them into arrays.

// Randomizes the game so the player doesn't get the same board configuration twice.
randomize();

// Defines the number of columns in the grid.
columns = 10;

// Defines the number of rows in the grid.
rows = 6;

// The number of pieces that will be present on the board.  Should be greater than 1.
piece_range = 3;

// Set the horizontal and vertical spacing based on the size of the grid block.
x_spacing = sprite_get_width(spr_grid);
y_spacing = sprite_get_height(spr_grid);

// Define variables for loops.
var i, j;

// Loop through the columns and rows, creating the grid and puzzle pieces.
for (i = 0; i &lt; columns; i++)
{
    for (j = 0; j &lt; rows; j++)
    {
        array_grid[i, j] = scr_create_in_grid(x, y, x_spacing, y_spacing, 1, obj_grid_block, i, j);
        array_pieces[i, j] = scr_create_in_grid(x, y, x_spacing, y_spacing, 0, obj_puzzle_piece, i, j);
        array_pieces[i, j].image_index =  irandom(piece_range);
    }
}

// Recursively checks the board to prevent matches of three on start.
scr_check_board(false);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initializes keyboard and mouse input specific variables.

// A reference to the grid manager.
global.grid_manager = id;

// The current column and row highlighted on the board by mouse.
current_mouse_col = -1;
current_mouse_row = -1;

// The current piece highlighted on the board by keyboard.
current_key_col = -1;
current_key_row = -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initializes variables for the state of an alarm-based break.

// Indicates that pieces are being shifted.
is_shifting_pieces = false;

// Starts playing the music in silence.
audio_music_gain(0,0);

// Plays the music, starting in silence.
audio_play_music(bgm_normal, true);

// Sets the alarm for playing music to 10.
alarm[1] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Removes reference to the destroyed object.
global.grid_manager = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fades in music.

// Fades the music to full volume in 10 seconds.
audio_music_gain(1, 10000);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reorganizes the board and triggers explosions.

scr_reorganize_board();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// If the mouse is highlighting a piece, this highlight is carried over to the keyboard.
if (current_mouse_col &gt;= 0 &amp;&amp; current_mouse_row &gt;= 0)
{
    current_key_col = current_mouse_col;
    current_key_row = current_mouse_row;

    current_mouse_col = -1;
    current_mouse_row = -1;
}

// If a piece if currently highlighted by the keyboard, this piece goes back to its initial frame.
if (current_key_col &gt;= 0 &amp;&amp; current_key_row &gt;= 0)
{
    array_grid[current_key_col, current_key_row].image_index = 0;
}
else 
{
    // The currently highlighted piece is out of range, the top left is assigned.
    current_key_col = 0;
    current_key_row = 0;
}

// Variable assigned if either shift key or the spacebar is down.
var shift_down;
shift_down = !is_shifting_pieces &amp;&amp; (keyboard_check(vk_shift) || keyboard_check(vk_space));

// Switch statement used for the four main keyboard directions.
switch(keyboard_key)
{
    case vk_left:
        if (shift_down)
        {
            scr_swap_pieces(current_key_col, current_key_row, -1, 0, false, 0);
        }
        current_key_col--;
        
        break;
    case vk_right:
        if (shift_down)
        {
            scr_swap_pieces(current_key_col, current_key_row, 1, 0, false, 0);
        }
        current_key_col++;
        break;
    case vk_up:
        if (shift_down)
        {
            scr_swap_pieces(current_key_col, current_key_row, 0, -1, false, 0);
        }
        current_key_row--;
        break;
    case vk_down:
        if (shift_down)
        {
            scr_swap_pieces(current_key_col, current_key_row, 0, 1, false, 0);
        }
        current_key_row++;
        break;
}

// The current key clamped to make sure an out of range grid block is not highlighted.
current_key_col = clamp(current_key_col, 0, columns - 1);
current_key_row = clamp(current_key_row, 0, rows - 1);

// If shift or space are down, the current grid block goes to the down frame; otherwise, just the highlight frame.
if (shift_down)
{
    array_grid[current_key_col, current_key_row].image_index = 2;
}
else
{
    array_grid[current_key_col, current_key_row].image_index = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ESAMOKE GAEPAD
/*var i;
for (i = 0; i &lt; gamepad_count; i++)
{
    if (!gamepad_is_connected(i))
        continue;
        
    if (gamepad_button_check_pressed(i, gp_face1))
    {
        keyboard_key_press(vk_space);
    }
    
    if (gamepad_button_check_released(i, gp_face1))
    {
        keyboard_key_release(vk_space);
    }
        
    if (gamepad_button_check_pressed(i, gp_padl))
    {
        keyboard_key_press(vk_left);
    }
    
    if (gamepad_button_check_pressed(i, gp_padr))
    {
        keyboard_key_press(vk_right);
    }
    
    if (gamepad_button_check_pressed(i, gp_padd))
    {
        keyboard_key_press(vk_down);
    }
    
    if (gamepad_button_check_pressed(i, gp_padu))
    {
        keyboard_key_press(vk_up);
    }
    
    if (gamepad_button_check_released(i, gp_padl))
    {
        keyboard_key_release(vk_left);
    }
    
    if (gamepad_button_check_released(i, gp_padr))
    {
        keyboard_key_release(vk_right);
    }
    
    if (gamepad_button_check_released(i, gp_padd))
    {
        keyboard_key_release(vk_down);
    }
    
    if (gamepad_button_check_released(i, gp_padu))
    {
        keyboard_key_release(vk_up);
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// If the current key column and row are in range...
if (current_key_col &gt;= 0 &amp;&amp; current_key_row &gt;= 0)
{
    // If spacebar and the shift key are not down, the current grid block is reverted back to the highlight frame.
    if (!keyboard_check(vk_space) &amp;&amp; !keyboard_check(vk_shift))
    {
        array_grid[current_key_col, current_key_row].image_index = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
