<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_grid</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// If the mouse is currently over the current piece, the piece is highlighted.
if (position_meeting(mouse_x, mouse_y, self))
{
    // Sets the image index to the image being highlighted.
    image_index = 1;
}
else if (image_index == 1)
{
    // Sets the object back to the first frame, but only if it was previously highlighted.
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* If the grid block is currently being highlighted and pieces are not shifting, 
   the pieces are swapped based on the direction the mouse has moved. */
if (image_index == 2 &amp;&amp; !global.grid_manager.is_shifting_pieces)
{
    // Determine which way the blocks were swapped.
    var x_direction, y_direction;
    x_direction = mouse_x - x;
    y_direction = mouse_y - y;
       
    // Swap the pieces.
    scr_swap_pieces(col, row, x_direction, y_direction, false, 0);
}

// The image_index is set back to 0.
image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Sets the column and row of the grid piece currently being highlighted by the mouse.
global.grid_manager.current_mouse_col = col;
global.grid_manager.current_mouse_row = row;

// Sets the keyboard column and row information.
with (global.grid_manager)
{
    if (current_key_col &gt;= 0 &amp;&amp; current_key_row &gt;= 0)
    {
        array_grid[current_key_col, current_key_row].image_index = 0;
    }
    current_key_col = -1;
    current_key_row = -1;
}

// Sets the frame to the block's highlight state.
image_index = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Sets the image_index to the down state.
image_index = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Sets the number of audio channels or simultaneous sounds that can be played.
 * If the number of sounds being played exceeds this, sounds are played based on
 * their priority.  The default number of channels is 128.  Using less channels
 * can increase performance. */
audio_channel_num(92);

/* Gets the type of music being played.
 * 0:  Sound effect
 * 1:  Background music
 * -1:  Error . */
var sound_type = audio_get_type(bgm_normal);

/* Plays a sound.
 * argument0 is the sound's resource id.
 * argument1 is the priority.  Higher priority sound will player over lower ones
 * if the number of available sound channels become low.
 * argument2 indicates if the sound loops or not.
 * An id is returned that can be editted with other built-in functions.
 */
var new_sound = audio_play_sound(snd_pop, 0, false);

// Returns the length of the given sound in seconds.
audio_sound_length(new_sound);

/* Adjusts the pitch of a given sound.
 * argument0 is the sound id.
 * argument1 is the pitch, which should range between 0 and 5, defaulting at 1.
 * A higher value will make the playing sound more high pitched.
 * A lower value will give the sound a lower, deeper pitch. 
 * A sound resource id can also be used, which will change the pitch whenever said sound is played.
 */
audio_sound_pitch(new_sound, 0.5);

/* Fades in a sound effect. 
 * argument0 is the sound id.
 * argument1 is the volume, which should range between 0 and 1.
 * argument2 is the amount of time the sound takes to reach the
 * goal volume in milliseconds 
 * The example below will fade the newly created sound to complete silence over 4 seconds. */
audio_sound_gain(new_sound, 0, 4000);

// Pauses the given sound.
audio_pause_sound(new_sound);

// Resume the given sound if paused.
audio_resume_sound(new_sound);

// Stops the given sound.
audio_stop_sound(new_sound);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Plays the given music sound resource.  The second argument specifies if the music should loop or not.
audio_play_music(bgm_normal, true);

// Returns a boolean specifying if music is playing.
audio_music_is_playing();

// Pauses the music that is playing.
audio_pause_music();

// Resumes the music if it has been paused.
audio_resume_music();

/* Fades in music.
 * argument0 is the volume value that the music fades in to.
 * argument1 is the amount of time in milliseconds to reach said volume. 
 * In the below, the music being played would take about ten seconds to fade to silence. */
audio_music_gain(0, 10000);

// Stops the currently playing music.
audio_stop_music();

// Pauses all sounds and music playing.
audio_pause_all();

// Resumes all paused sound and music.
audio_resume_all();

// Stops all sounds and music.
audio_stop_all();

/* Sets the master volume of the game for all sounds and music.
 * argument0 is the percentage volume from 0 to 1. */
audio_master_gain(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>36,36</point>
    <point>36,36</point>
  </PhysicsShapePoints>
</object>
