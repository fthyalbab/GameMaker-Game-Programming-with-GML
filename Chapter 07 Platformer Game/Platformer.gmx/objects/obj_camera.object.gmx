<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initializes variables for the camera.

// The index of the view that will be manipulated.
view_index = 0;

// The left most limit that the camera can move.
limit_left = 0;

// The right most limit that the camera can move.
limit_right = room_width;

// The top most limit that the camera can move.
limit_top = 0;

// The bottom most limit that the camera can move.
limit_bottom = room_height;

// The horizontal offset of the view, half of the view's width, to focus on the character.
offset_percent_x = 0.5;

// The vertical offset of the view, about a two thirds of the vertical view space.
offset_percent_y = 0.667;

// The rate at which the camera moves towards the target.
lerp_rate = 0.1

// Tries to assign the target by looking for an instance of the character.
target = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End Step function for the camera.

// Moves the camera towards the target if one exists.
if (target != noone)
{
    var offset_x = -view_wview[view_index] * offset_percent_x;
    var offset_y = -view_hview[view_index] * offset_percent_y;

    x = lerp(x, target.x + offset_x, lerp_rate);
    y = lerp(y, target.y + offset_y, lerp_rate);
}

// Clamps the view between the left and rough bounds of the camera.
x = clamp(x, limit_left, limit_right - view_wview[view_index]);
y = clamp(y, limit_top, limit_bottom - view_hview[view_index]);

// Moves the view to the x and y of the camera.
view_xview[view_index] = x;
view_yview[view_index] = y;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Adjusts the background.

// Gets the range in which the background will move based on the camera.
var x_bg_range = max(1, limit_right - view_wview[view_index] - limit_left);
var y_bg_range = max(1, limit_bottom - view_hview[view_index] - limit_top);

// Gets the percentage that the camera is currently within the background ranges.
var x_percent = x / x_bg_range;
var y_percent = y / y_bg_range;

// Gets the max value of the background on the x axis, moving it left to right.
var bg_max_x = x - background_width[0] + view_wview[view_index];

// Gets the max value of the background on the y axis, moving it bottom to top.
var bg_max_y = y + background_height[0] - view_hview[view_index];

// Sets the x and y of the background based on 
background_x[0] = lerp(x, bg_max_x, x_percent);
background_y[0] = lerp(y, bg_max_y, y_percent);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
