<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_grid</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>return 0;

var result;
result = "No input";

// Checks if the specified mouse button is down, returning a boolean.
if (mouse_check_button(mb_left))
{
    result = "Left mouse button down";
}

// Checks if the specified mouse button was pressed this frame, returning a boolean.
// Using mb_any, will return true regardless of which button was pressed.
if (mouse_check_button_pressed(mb_any))
{
    result = "A mouse button was pressed";
}

// Checks if the specified mouse button was released this frame, returning a boolean.
if (mouse_check_button_released(mb_right))
{
    result = "Right mouse button released";
}

// Checks if the mouse wheel was moved down or up respectively.
if (mouse_wheel_down() || mouse_wheel_up())
{
    result = "Mouse wheel moved";
}

// Clears input state for the specified button, meaning it will not 
// generate events until pressed or released again.
mouse_clear(mb_left);

return result;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// If the mouse is currently over the current piece, the piece is highlighted.
if (position_meeting(mouse_x, mouse_y, self))
{
    // Sets the image index to the image being highlighted.
    image_index = 1;
}
else if (image_index == 1)
{
    // Sets the object back to the first frame, but only if it was previously highlighted.
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* If the grid block is currently being highlighted, the pieces are swapped based on the direction the mouse has moved.*/
if (image_index == 2)
{
    // Determine which way the blocks were swapped.
    var x_direction, y_direction;
    x_direction = mouse_x - x;
    y_direction = mouse_y - y;
    
    // Swap the pieces.
    scr_swap_pieces(col, row, x_direction, y_direction, false);
}

// The image_index is set back to 0.
image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Sets the column and row of the grid piece currently being highlighted by the mouse.
global.grid_manager.current_mouse_col = col;
global.grid_manager.current_mouse_row = row;

// Sets the keyboard column and row information.
with (global.grid_manager)
{
    if (current_key_col &gt;= 0 &amp;&amp; current_key_row &gt;= 0)
    {
        array_grid[current_key_col, current_key_row].image_index = 0;
    }
    current_key_col = -1;
    current_key_row = -1;
}

// Sets the frame to the block's highlight state.
image_index = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Sets the image_index to the down state.
image_index = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>36,36</point>
    <point>36,36</point>
  </PhysicsShapePoints>
</object>
